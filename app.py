import streamlit as st
from supabase import create_client, Client
import random
import time
import io
import uuid
import pandas as pd
from datetime import datetime
import os

# --- Initial Setup ---
st.set_page_config(
    page_title="Number Assignment & Form System",
    layout="centered",
    initial_sidebar_state="expanded"
)

# --- Updated CSS Styling ---
st.markdown("""
<style>
    body {font-family: 'Arial', sans-serif;}
    .main-header {
        text-align: center; 
        margin-bottom: 40px; 
        font-size: 2.5em; 
        color: #2C3E50; 
        font-weight: 600;
    }
    .sub-header {
        font-size: 1.5em; 
        color: #2980B9; 
        margin-top: 20px; 
        font-weight: 500;
    }
    .number-display {
        font-size: 72px; 
        text-align: center; 
        margin: 30px 0; 
        color: #2C3E50; 
        font-weight: bold;
    }
    .success-msg {
        background-color: #ECF0F1; 
        color: #2C3E50; 
        padding: 15px; 
        border-radius: 8px; 
        border-left: 5px solid #27AE60;
        margin: 20px 0;
    }
    .error-msg {
        background-color: #FADBD8; 
        color: #922B21; 
        padding: 15px; 
        border-radius: 8px; 
        border-left: 5px solid #E74C3C;
        margin: 20px 0;
    }
    .instruction-box {
        background-color: #F7F9F9; 
        padding: 15px; 
        border-radius: 8px; 
        border: 1px solid #D5DBDB; 
        font-size: 0.9em; 
        color: #7F8C8D; 
        margin: 20px 0;
    }
    .stButton>button {
        background-color: #2980B9; 
        color: white; 
        border: none; 
        padding: 10px 20px; 
        border-radius: 5px; 
        font-weight: 500; 
        transition: background-color 0.3s;
    }
    .stButton>button:hover {
        background-color: #3498DB;
    }
    .sidebar .sidebar-content {
        background-color: #ECF0F1;
        padding: 20px;
    }
    .stDataFrame {
        border: 1px solid #D5DBDB; 
        border-radius: 8px; 
        overflow: hidden;
    }
    .form-item {
        font-size: 1.2em; 
        color: #2C3E50; 
        margin: 10px 0;
    }
</style>
""", unsafe_allow_html=True)

# --- Functions ---

def get_supabase_client() -> Client:
    supabase_url = os.getenv("SUPABASE_URL")
    supabase_key = os.getenv("SUPABASE_KEY")
    if not supabase_url or not supabase_key:
        st.error("Supabase credentials not configured in the environment.")
        return None
    try:
        client = create_client(supabase_url, supabase_key)
        client.table("_dummy").select("*").limit(1).execute()
        return client
    except Exception as e:
        st.error(f"Error connecting to Supabase: {str(e)}")
        return None

def check_table_exists(supabase, table_name):
    try:
        supabase.table(table_name).select("*").limit(1).execute()
        return True
    except Exception:
        return False

def create_meeting_table(supabase, table_name, meeting_name, max_number=999, selected_forms=None):
    try:
        response_metadata = supabase.table("meetings_metadata").insert({
            "table_name": table_name,
            "meeting_name": meeting_name,
            "created_at": datetime.now().isoformat(),
            "max_number": max_number
        }).execute()
        meeting_id = response_metadata.data[0]["id"]

        create_table_query = f"""
        CREATE TABLE public.{table_name} (
            id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            number INTEGER NOT NULL,
            assigned BOOLEAN DEFAULT FALSE,
            assigned_at TIMESTAMPTZ,
            user_id TEXT
        );
        """
        supabase.rpc("execute_sql", {"query": create_table_query}).execute()

        time.sleep(1)
        if not check_table_exists(supabase, table_name):
            raise Exception(f"Table {table_name} was not created successfully in Supabase.")

        batch_size = 100
        for i in range(0, max_number, batch_size):
            end = min(i + batch_size, max_number)
            data = [{"number": j, "assigned": False, "assigned_at": None, "user_id": None} 
                    for j in range(i+1, end+1)]
            supabase.table(table_name).insert(data).execute()

        if selected_forms:
            for form_id in selected_forms:
                supabase.table("meeting_forms").insert({
                    "meeting_id": meeting_id,
                    "form_id": form_id
                }).execute()
        
        return True
    except Exception as e:
        st.error(f"Error creating meeting table: {str(e)}")
        try:
            supabase.table("meetings_metadata").delete().eq("table_name", table_name).execute()
            supabase.rpc("execute_sql", {"query": f"DROP TABLE IF EXISTS public.{table_name}"}).execute()
        except Exception as rollback_e:
            st.error(f"Rollback error: {str(rollback_e)}")
        return False

def get_available_meetings(supabase):
    try:
        response = supabase.table("meetings_metadata").select("*").execute()
        return response.data if response.data else []
    except Exception as e:
        st.error(f"Error retrieving meetings: {str(e)}")
        return []

def get_available_forms(supabase):
    try:
        response = supabase.table("forms_metadata").select("*").execute()
        return response.data if response.data else []
    except Exception as e:
        st.error(f"Error retrieving forms: {str(e)}")
        return []

def get_forms_for_meeting(supabase, meeting_id):
    try:
        response = supabase.table("meeting_forms").select("form_id").eq("meeting_id", meeting_id).execute()
        form_ids = [row["form_id"] for row in response.data]
        if form_ids:
            forms = supabase.table("forms_metadata").select("*").in_("id", form_ids).execute()
            return forms.data if forms.data else []
        return []
    except Exception as e:
        st.error(f"Error retrieving forms for meeting: {str(e)}")
        return []

def get_answered_forms(supabase, participant_id):
    try:
        response = supabase.table("responses").select("form_id").eq("participant_id", participant_id).execute()
        return set(row["form_id"] for row in response.data) if response.data else set()
    except Exception as e:
        st.error(f"Error checking answered forms: {str(e)}")
        return set()

def generate_participant_link(table_name, user_id=None, mode="participant"):
    base_url = "https://mynumber.streamlit.app"
    if user_id:
        return f"{base_url}/?table={table_name}&mode={mode}&user_id={user_id}"
    return f"{base_url}/?table={table_name}&mode={mode}"

# --- Mode Check ---
query_params = st.query_params
mode = query_params.get("mode", "master")
table_name_from_url = query_params.get("table", None)

if "user_id" not in st.session_state:
    user_id_from_url = query_params.get("user_id", None)
    if user_id_from_url:
        st.session_state["user_id"] = user_id_from_url
    else:
        st.session_state["user_id"] = str(uuid.uuid4())

if mode == "participant" and table_name_from_url:
    # --- Participant Mode for Meetings ---
    st.markdown("<h1 class='main-header'>Your Meeting Page</h1>", unsafe_allow_html=True)
    supabase = get_supabase_client()
    if not supabase:
        st.stop()
    
    if not check_table_exists(supabase, table_name_from_url):
        st.error("Meeting not found or invalid.")
        st.stop()
    
    try:
        meeting_info = supabase.table("meetings_metadata").select("*").eq("table_name", table_name_from_url).execute()
        meeting_name = meeting_info.data[0]["meeting_name"] if meeting_info.data else "Meeting"
        meeting_id = meeting_info.data[0]["id"]
        st.subheader(f"Meeting: {meeting_name}")
    except Exception:
        st.subheader("Get a number for the meeting")
        st.stop()

    user_id = st.session_state["user_id"]
    participant_link = generate_participant_link(table_name_from_url, user_id, mode="participant")
    
    # Instructions at the top with emojis
    st.markdown("""
    <div class='instruction-box'>
        <strong>📌 Keep this link safe to always access your number!</strong> Do not share it with others. Also, save your number below — you'll need it if you lose this link. <br> 
        💡 <em>Tip: Take a screenshot of this page to save your number.</em>
    </div>
    """, unsafe_allow_html=True)

    # "Copy Your Link" button
    st.markdown("**Your Link for This Meeting:**")
    if st.button("Copy Your Link", key="copy_link"):
        st.write(f"Link: {participant_link}")
        st.code(participant_link, language="text")
        st.success("Link copied to clipboard!")

    # Number assignment
    try:
        existing = supabase.table(table_name_from_url).select("number").eq("user_id", user_id).execute()
        if existing.data:
            st.session_state["assigned_number"] = existing.data[0]["number"]
        else:
            with st.spinner("Assigning a number..."):
                response = supabase.table(table_name_from_url).select("*").eq("assigned", False).execute()
                if response.data:
                    available_numbers = [row["number"] for row in response.data]
                    if available_numbers:
                        assigned_number = random.choice(available_numbers)
                        supabase.table(table_name_from_url).update({
                            "assigned": True,
                            "assigned_at": datetime.now().isoformat(),
                            "user_id": user_id
                        }).eq("number", assigned_number).execute()
                        st.session_state["assigned_number"] = assigned_number
                    else:
                        st.error("All numbers have been assigned!")
                        st.stop()
                else:
                    st.error("All numbers have been assigned!")
                    st.stop()

        st.markdown(f"""
        <div class='success-msg'>
            <p>Your assigned number is:</p>
            <div class='number-display'>{st.session_state['assigned_number']}</div>
        </div>
        """, unsafe_allow_html=True)

        # Available Forms with improved presentation and direct access
        st.subheader("Available Forms for You")
        forms = get_forms_for_meeting(supabase, meeting_id)
        participant_id = str(st.session_state["assigned_number"])
        answered_forms = get_answered_forms(supabase, participant_id)
        if forms:
            for form in forms:
                form_id = form["id"]
                form_table_name = form["table_name"]
                status = "✅ Completed" if form_id in answered_forms else "⏳ Pending"
                st.markdown(f"<div class='form-item'><strong>{form['form_name']}</strong> ({status})</div>", unsafe_allow_html=True)
                if st.button(f"Access {form['form_name']}", key=f"form_{form_id}"):
                    # Redirect directly to the form
                    st.query_params.update({
                        "table": form_table_name,
                        "mode": "participant_form",
                        "user_id": user_id
                    })
                    st.rerun()
        else:
            st.info("No forms available for this meeting.")

    except Exception as e:
        st.error(f"Error assigning number: {str(e)}")
        st.stop()

elif mode == "participant_form" and table_name_from_url:
    # --- Participant Mode for Forms ---
    st.markdown("<h1 class='main-header'>Submit Form</h1>", unsafe_allow_html=True)
    supabase = get_supabase_client()
    if not supabase:
        st.stop()
    
    form_info = supabase.table("forms_metadata").select("*").eq("table_name", table_name_from_url).execute()
    if not form_info.data:
        st.error("Form not found.")
        st.stop()

    form_id = form_info.data[0]['id']
    st.subheader(f"Form: {form_info.data[0]['form_name']}")

    questions = supabase.table("questions").select("*").eq("form_id", form_id).execute()
    if not questions.data:
        st.error("No questions found for this form.")
        st.stop()

    user_id = st.session_state["user_id"]
    participant_id_default = ""
    meeting_table_name = ""
    for meeting in get_available_meetings(supabase):
        assigned = supabase.table(meeting["table_name"]).select("number").eq("user_id", user_id).execute()
        if assigned.data:
            participant_id_default = str(assigned.data[0]["number"])
            meeting_table_name = meeting["table_name"]
            break
    
    if not participant_id_default:
        st.error("You need an assigned number to submit forms.")
        st.stop()

    participant_id = participant_id_default
    answered_forms = get_answered_forms(supabase, participant_id)
    if form_id in answered_forms:
        st.warning("You have already submitted this form. Each participant can only submit once.")
        if st.button("Back to Your Page", key="back_to_page"):
            st.query_params.update({
                "table": meeting_table_name,
                "mode": "participant",
                "user_id": user_id
            })
            st.rerun()
        st.stop()

    with st.form("form_submission"):
        responses = {}
        for q in questions.data:
            st.write(f"{q['question_text']}")
            if q['question_type'] == 'text':
                responses[q['id']] = st.text_input("Your answer", key=f"resp_{q['id']}")
            elif q['question_type'] == 'multiple_choice':
                options = supabase.table("options").select("*").eq("question_id", q['id']).execute()
                option_texts = [opt['option_text'] for opt in options.data]
                option_ids = [opt['id'] for opt in options.data]
                selected_option = st.radio("Choose an option", option_texts, index=None, key=f"resp_{q['id']}")
                if selected_option is not None:
                    responses[q['id']] = option_ids[option_texts.index(selected_option)]
                else:
                    responses[q['id']] = None

        st.text_input("Your Name or ID", value=participant_id, key="participant_id", disabled=True)
        if st.form_submit_button("Submit"):
            if all(responses.values()):
                for q_id, answer in responses.items():
                    response_data = {
                        "form_id": form_id,
                        "participant_id": participant_id,
                        "question_id": q_id,
                        "answer": str(answer)
                    }
                    supabase.table("responses").insert(response_data).execute()
                st.success("Responses submitted successfully!")
                st.markdown("Returning to your participant page in 3 seconds...")
                time.sleep(3)
                st.query_params.update({
                    "table": meeting_table_name,
                    "mode": "participant",
                    "user_id": user_id
                })
                st.rerun()
            else:
                st.warning("Please fill in all responses.")

else:
    # --- Master Mode ---
    valid_pages = ["Manage Meetings", "Share Meeting Link", "View Statistics", "Manage Forms", "Share Form Link"]
    if "page" not in st.session_state or st.session_state["page"] not in valid_pages:
        st.session_state["page"] = "Manage Meetings"

    st.sidebar.title("Menu (Master)")
    page = st.sidebar.radio("Choose an option", valid_pages, index=valid_pages.index(st.session_state["page"]))

    if page == "Manage Meetings":
        st.session_state["page"] = "Manage Meetings"
        st.markdown("<h1 class='main-header'>Manage Meetings</h1>", unsafe_allow_html=True)
        supabase = get_supabase_client()
        if not supabase:
            st.stop()
        
        with st.form("create_meeting_form"):
            st.subheader("Create New Meeting")
            meeting_name = st.text_input("Meeting Name")
            max_number = st.number_input("Maximum Number", min_value=10, max_value=10000, value=999)
            
            forms = get_available_forms(supabase)
            form_options = {f"{f['form_name']} ({f['table_name']})": f["id"] for f in forms}
            selected_forms = st.multiselect("Forms Available in this Meeting", list(form_options.keys()))
            selected_form_ids = [form_options[form] for form in selected_forms] if selected_forms else None

            submit_button = st.form_submit_button("Create Meeting")
            
            if submit_button:
                if meeting_name:
                    table_name = f"meeting_{int(time.time())}_{meeting_name.lower().replace(' ', '_')}"
                    if check_table_exists(supabase, table_name):
                        st.error("A meeting with this name already exists. Try a different name.")
                    else:
                        with st.spinner("Creating meeting..."):
                            success = create_meeting_table(supabase, table_name, meeting_name, max_number, selected_form_ids)
                            if success:
                                participant_link = generate_participant_link(table_name, mode="participant")
                                st.success(f"Meeting '{meeting_name}' created successfully!")
                                st.markdown("**Participant Link:**")
                                if st.button("Share Meeting", key="share_meeting"):
                                    st.code(participant_link, language="text")
                                st.session_state["selected_table"] = table_name
                                st.session_state["page"] = "Share Meeting Link"
                                st.rerun()
                            else:
                                st.error("Failed to create the meeting.")
                else:
                    st.warning("Please enter a name for the meeting.")
        
        st.subheader("Existing Meetings")
        meetings = get_available_meetings(supabase)
        if meetings:
            meeting_data = []
            for meeting in meetings:
                if "table_name" in meeting and "meeting_name" in meeting:
                    table_name = meeting["table_name"]
                    if check_table_exists(supabase, table_name):
                        try:
                            count_response = supabase.table(table_name).select("*", count="exact").eq("assigned", True).execute()
                            assigned_count = count_response.count if hasattr(count_response, 'count') else 0
                            participant_link = generate_participant_link(table_name, mode="participant")
                            meeting_data.append({
                                "Name": meeting.get("meeting_name", "No name"),
                                "Table": table_name,
                                "Link": participant_link,
                                "Created At": meeting.get("created_at", "")[:16].replace("T", " "),
                                "Assigned Numbers": assigned_count,
                                "Total Numbers": meeting.get("max_number", 0)
                            })
                        except Exception as e:
                            st.warning(f"Error processing meeting {table_name}: {str(e)}")
            if meeting_data:
                df = pd.DataFrame(meeting_data)
                st.dataframe(df)
            else:
                st.info("No valid meetings found.")
        else:
            st.info("No meetings available or error accessing Supabase.")

    elif page == "Share Meeting Link":
        st.session_state["page"] = "Share Meeting Link"
        st.markdown("<h1 class='main-header'>Share Meeting Link</h1>", unsafe_allow_html=True)
        
        supabase = get_supabase_client()
        if not supabase:
            st.stop()
        
        meetings = get_available_meetings(supabase)
        if not meetings:
            st.info("No meetings available. Create a meeting first.")
            st.stop()
        
        options = {f"{m['meeting_name']} ({m['table_name']})": m["table_name"] 
                   for m in meetings if "table_name" in m and "meeting_name" in m}
        selected = st.selectbox("Select a meeting to share:", list(options.keys()))
        
        if selected:
            selected_table = options[selected]
            participant_link = generate_participant_link(selected_table, mode="participant")
            st.markdown("**Participant Link:**")
            if st.button("Copy Link", key="copy_meeting_link"):
                st.write("Link copied to clipboard!")
                st.code(participant_link, language="text")

    elif page == "View Statistics":
        st.session_state["page"] = "View Statistics"
        st.markdown("<h1 class='main-header'>Meeting Statistics</h1>", unsafe_allow_html=True)
        supabase = get_supabase_client()
        if not supabase:
            st.stop()
        
        meetings = get_available_meetings(supabase)
        if not meetings:
            st.info("No meetings available for analysis.")
            st.stop()
        
        options = {f"{m['meeting_name']} ({m['table_name']})": m["table_name"] 
                   for m in meetings if "table_name" in m and "meeting_name" in m}
        selected = st.selectbox("Select a meeting:", list(options.keys()))
        
        if selected:
            selected_table = options[selected]
            meeting_info = supabase.table("meetings_metadata").select("id").eq("table_name", selected_table).execute()
            meeting_id = meeting_info.data[0]["id"]
            
            try:
                total_response = supabase.table(selected_table).select("*", count="exact").execute()
                total_numbers = total_response.count if hasattr(total_response, 'count') else 0
                assigned_response = supabase.table(selected_table).select("*", count="exact").eq("assigned", True).execute()
                assigned_numbers = assigned_response.count if hasattr(assigned_response, 'count') else 0
                percentage = (assigned_numbers / total_numbers) * 100 if total_numbers > 0 else 0
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Total Numbers", total_numbers)
                with col2:
                    st.metric("Assigned Numbers", assigned_numbers)
                with col3:
                    st.metric("Percentage Assigned", f"{percentage:.1f}%")
                
                try:
                    time_data_response = supabase.table(selected_table).select("*").eq("assigned", True).order("assigned_at").execute()
                    if time_data_response.data:
                        time_data = []
                        for item in time_data_response.data:
                            if item.get("assigned_at"):
                                time_data.append({
                                    "time": item.get("assigned_at")[:16].replace("T", " "),
                                    "count": 1
                                })
                        if time_data:
                            df = pd.DataFrame(time_data)
                            df["time"] = pd.to_datetime(df["time"])
                            df["hour"] = df["time"].dt.floor("H")
                            hourly_counts = df.groupby("hour").count().reset_index()
                            hourly_counts["hour_str"] = hourly_counts["hour"].dt.strftime("%m/%d %H:00")
                            st.subheader("Number Assignments by Hour")
                            st.bar_chart(data=hourly_counts, x="hour_str", y="count")
                except Exception:
                    st.info("Temporal data not available for this meeting.")
                
                if st.button("Export Number Data"):
                    try:
                        all_data_response = supabase.table(selected_table).select("*").execute()
                        if all_data_response.data:
                            df = pd.DataFrame(all_data_response.data)
                            csv = df.to_csv(index=False)
                            st.download_button(
                                "Download CSV",
                                csv,
                                file_name=f"{selected_table}_numbers_export.csv",
                                mime="text/csv"
                            )
                    except Exception as e:
                        st.error(f"Error exporting data: {str(e)}")
            except Exception as e:
                st.error(f"Error retrieving number statistics: {str(e)}")

            st.subheader("Form Responses")
            forms = get_forms_for_meeting(supabase, meeting_id)
            if forms:
                form_ids = [f["id"] for f in forms]
                responses = supabase.table("responses").select("participant_id, form_id, question_id, answer").in_("form_id", form_ids).execute()
                if responses.data:
                    response_data = []
                    for resp in responses.data:
                        form = next((f for f in forms if f["id"] == resp["form_id"]), None)
                        question = supabase.table("questions").select("question_text, question_type, correct_answer").eq("id", resp["question_id"]).execute().data[0]
                        
                        answer_display = resp["answer"]
                        is_correct = None
                        if question["question_type"] == "multiple_choice":
                            option = supabase.table("options").select("option_text").eq("id", resp["answer"]).execute()
                            answer_display = option.data[0]["option_text"] if option.data else resp["answer"]
                            if question["correct_answer"]:
                                is_correct = "✅ Correct" if resp["answer"] == question["correct_answer"] else "❌ Incorrect"
                        elif question["question_type"] == "text" and question["correct_answer"]:
                            is_correct = "✅ Correct" if resp["answer"].lower() == question["correct_answer"].lower() else "❌ Incorrect"

                        response_data.append({
                            "Participant": resp["participant_id"],
                            "Form": form["form_name"] if form else "Unknown",
                            "Question": question["question_text"],
                            "Response": answer_display,
                            "Correct": is_correct if is_correct is not None else "N/A"
                        })
                    
                    df = pd.DataFrame(response_data)
                    st.dataframe(df)
                    
                    if st.button("Export Form Responses"):
                        csv = df.to_csv(index=False)
                        st.download_button(
                            "Download CSV",
                            csv,
                            file_name=f"{selected_table}_responses_export.csv",
                            mime="text/csv"
                        )
                else:
                    st.info("No responses recorded for this meeting's forms.")
            else:
                st.info("No forms associated with this meeting.")

    elif page == "Manage Forms":
        st.session_state["page"] = "Manage Forms"
        st.markdown("<h1 class='main-header'>Manage Forms</h1>", unsafe_allow_html=True)
        supabase = get_supabase_client()
        if not supabase:
            st.stop()
        
        with st.form("create_form_form"):
            st.subheader("Create New Form")
            form_name = st.text_input("Form Name", key="form_name")

            if 'questions' not in st.session_state:
                st.session_state['questions'] = []
            if 'current_options' not in st.session_state:
                st.session_state['current_options'] = []
            if 'show_options_form' not in st.session_state:
                st.session_state['show_options_form'] = False
            if 'current_question_index' not in st.session_state:
                st.session_state['current_question_index'] = None

            st.markdown("<h3 class='sub-header'>Add Question</h3>", unsafe_allow_html=True)
            question_type = st.selectbox("Question Type", ["Text", "Multiple Choice"], key="q_type")
            question_text = st.text_input("Question Text", key="q_text")

            if st.form_submit_button("Add Question"):
                if question_text:
                    question_data = {
                        'type': 'text' if question_type == "Text" else 'multiple_choice',
                        'text': question_text,
                        'options': [],
                        'correct': None
                    }
                    st.session_state['questions'].append(question_data)
                    if question_type == "Multiple Choice":
                        st.session_state['show_options_form'] = True
                        st.session_state['current_question_index'] = len(st.session_state['questions']) - 1
                        st.session_state['current_options'] = []
                    else:
                        st.session_state['show_options_form'] = False
                    st.success(f"Question '{question_text}' added!")
                else:
                    st.warning("Question text is required.")

            if st.session_state['show_options_form'] and st.session_state['current_question_index'] is not None:
                st.markdown("<h3 class='sub-header'>Add Options</h3>", unsafe_allow_html=True)
                option_text = st.text_input("Option Text", key="opt_text")
                if st.form_submit_button("Add Option"):
                    if option_text:
                        st.session_state['current_options'].append(option_text)
                        st.success(f"Option '{option_text}' added!")
                    else:
                        st.warning("Option text is required.")

                if st.session_state['current_options']:
                    st.write("Options added so far:")
                    for i, opt in enumerate(st.session_state['current_options']):
                        st.write(f"{i+1}. {opt}")

                if len(st.session_state['current_options']) >= 2:
                    correct_option = st.selectbox("Correct Option (optional)", ["None"] + st.session_state['current_options'], key="correct_opt")
                    if st.form_submit_button("Finish Options"):
                        current_idx = st.session_state['current_question_index']
                        st.session_state['questions'][current_idx]['options'] = st.session_state['current_options']
                        if correct_option != "None":
                            st.session_state['questions'][current_idx]['correct'] = correct_option
                        st.session_state['show_options_form'] = False
                        st.session_state['current_question_index'] = None
                        st.session_state['current_options'] = []
                        st.success("Options and correct answer (if selected) saved!")

            if st.session_state['questions']:
                st.markdown("<h3 class='sub-header'>Added Questions</h3>", unsafe_allow_html=True)
                for i, q in enumerate(st.session_state['questions']):
                    st.write(f"{i+1}. {q['text']} ({q['type']})")
                    if q['type'] == 'multiple_choice' and q['options']:
                        st.write("Options:", ", ".join(q['options']))
                        st.write(f"Correct: {q['correct'] if q['correct'] else 'None'}")
                    elif q['type'] == 'text':
                        st.write(f"Correct: {q['correct'] if q['correct'] else 'None'}")

            if st.form_submit_button("Create Form"):
                if form_name and st.session_state['questions']:
                    table_name = f"form_{int(time.time())}_{form_name.lower().replace(' ', '_')}"
                    form_data = {"form_name": form_name, "table_name": table_name, "created_at": datetime.now().isoformat()}
                    form_response = supabase.table("forms_metadata").insert(form_data).execute()
                    form_id = form_response.data[0]['id']

                    for q in st.session_state['questions']:
                        question_data = {
                            "form_id": form_id,
                            "question_text": q['text'],
                            "question_type": q['type'],
                            "correct_answer": q['correct']
                        }
                        q_response = supabase.table("questions").insert(question_data).execute()
                        question_id = q_response.data[0]['id']

                        if q['type'] == 'multiple_choice' and q['options']:
                            for opt in q['options']:
                                opt_data = {"question_id": question_id, "option_text": opt}
                                opt_response = supabase.table("options").insert(opt_data).execute()
                                if opt == q['correct']:
                                    supabase.table("questions").update({"correct_answer": str(opt_response.data[0]['id'])}).eq("id", question_id).execute()

                    participant_link = generate_participant_link(table_name, mode="participant_form")
                    st.success(f"Form '{form_name}' created successfully!")
                    st.markdown("**General Participant Link:**")
                    if st.button("Share Form", key="share_form"):
                        st.code(participant_link, language="text")
                    st.session_state['questions'] = []
                    st.session_state['show_options_form'] = False
                    st.session_state['current_question_index'] = None
                    st.session_state['current_options'] = []
                    st.session_state["selected_form_table"] = table_name
                    st.session_state["page"] = "Share Form Link"
                    st.rerun()
                else:
                    st.warning("Enter a form name and at least one question.")

        st.subheader("Available Forms")
        forms = get_available_forms(supabase)
        if forms:
            form_data = []
            for form in forms:
                participant_link = generate_participant_link(form["table_name"], mode="participant_form")
                form_data.append({
                    "Name": form["form_name"],
                    "General Link": participant_link,
                    "Created At": form["created_at"][:16].replace("T", " ")
                })
            df = pd.DataFrame(form_data)
            st.dataframe(df, column_config={"General Link": st.column_config.LinkColumn("General Link")})
        else:
            st.info("No forms available.")

    elif page == "Share Form Link":
        st.session_state["page"] = "Share Form Link"
        st.markdown("<h1 class='main-header'>Share Form Link</h1>", unsafe_allow_html=True)
        
        supabase = get_supabase_client()
        if not supabase:
            st.stop()
        
        forms = get_available_forms(supabase)
        if not forms:
            st.info("No forms available. Create a form first.")
            st.stop()
        
        options = {f"{f['form_name']} ({f['table_name']})": f["table_name"] 
                   for f in forms if "table_name" in f and "form_name" in f}
        selected = st.selectbox("Select a form to share:", list(options.keys()))
        
        if selected:
            selected_table = options[selected]
            participant_link = generate_participant_link(selected_table, mode="participant_form")
            st.markdown("**General Participant Link:**")
            if st.button("Copy General Link", key="copy_form_link"):
                st.write("Link copied to clipboard!")
                st.code(participant_link, language="text")

            st.subheader("Unique Links per User")
            meetings = get_available_meetings(supabase)
            user_links = []
            for meeting in meetings:
                assigned_users = supabase.table(meeting["table_name"]).select("user_id, number").eq("assigned", True).execute()
                for user in assigned_users.data:
                    user_link = generate_participant_link(selected_table, user["user_id"], mode="participant_form")
                    user_links.append({"Number": user["number"], "Link": user_link})
            if user_links:
                df = pd.DataFrame(user_links)
                st.dataframe(df, column_config={"Link": st.column_config.LinkColumn("Link")})
            else:
                st.info("No users with assigned numbers found.")

if __name__ == "__main__":
    pass
